{
  "info": {
    "name": "2m2 - Credentials API (Simple)",
    "_postman_id": "b3c7ae7d-1bcb-4a3b-8c03-7b5f0e4e74f1",
    "description": "Create, list, filter, and delete API credentials. Secrets are encrypted at rest and never returned.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "base_url", "value": "http://localhost:8000" },
    { "key": "access_token", "value": "" },
    { "key": "api_key64", "value": "" },
    { "key": "api_secret64", "value": "" },
    { "key": "cred_id", "value": "" }
  ],
  "item": [
    {
      "name": "Create Credential (201)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
          { "key": "Content-Type", "value": "application/json", "type": "text" }
        ],
        "url": "{{base_url}}/credentials",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"env\": \"testnet\",\n  \"label\": \"default\",\n  \"api_key\": \"{{api_key64}}\",\n  \"api_secret\": \"{{api_secret64}}\"\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('201 Created', () => pm.response.code === 201);",
              "const j = pm.response.json();",
              "pm.collectionVariables.set('cred_id', j.id);",
              "pm.test('Has metadata only', () => {",
              "  pm.expect(j).to.have.keys(['id','user_id','env','label','created_at']);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Credential (duplicate → 400)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
          { "key": "Content-Type", "value": "application/json", "type": "text" }
        ],
        "url": "{{base_url}}/credentials",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"env\": \"testnet\",\n  \"label\": \"default\",\n  \"api_key\": \"{{api_key64}}\",\n  \"api_secret\": \"{{api_secret64}}\"\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('400 Duplicate', () => pm.response.code === 400);"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Credential (invalid length → 422)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
          { "key": "Content-Type", "value": "application/json", "type": "text" }
        ],
        "url": "{{base_url}}/credentials",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"env\": \"testnet\",\n  \"label\": \"bad-len\",\n  \"api_key\": \"too-short\",\n  \"api_secret\": \"too-short\"\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('422 Unprocessable', () => pm.response.code === 422);"
            ]
          }
        }
      ]
    },
    {
      "name": "List Credentials (200)",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" }
        ],
        "url": "{{base_url}}/credentials"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "const arr = pm.response.json();",
              "pm.test('Array and non-empty', () => Array.isArray(arr) && arr.length >= 1);"
            ]
          }
        }
      ]
    },
    {
      "name": "List Credentials (env=testnet)",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" }
        ],
        "url": "{{base_url}}/credentials?env=testnet"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "const arr = pm.response.json();",
              "pm.test('All env=testnet', () => arr.every(c => c.env === 'testnet'));"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete Credential (204)",
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" }
        ],
        "url": "{{base_url}}/credentials/{{cred_id}}"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('204 No Content', () => pm.response.code === 204);",
              "pm.collectionVariables.unset('cred_id');"
            ]
          }
        }
      ]
    }
  ]
}
