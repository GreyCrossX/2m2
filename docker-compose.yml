services:
  # ─────────────── Infra ───────────────
  redis:
    image: redis:7.2
    command: ["redis-server", "--appendonly", "yes"]
    ports: ["6379:6379"]
    volumes: [redis-data:/data]
    healthcheck:
      # Use redis-cli (available in the redis image), not Python.
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 90s         # allow time for AOF to load before judging health
    restart: unless-stopped

  postgres:
    image: postgres:16
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports: ["5432:5432"]
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:8
    env_file: .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    ports: ["${PGADMIN_PORT:-5050}:80"]
    volumes: [pgadmin-data:/var/lib/pgadmin]
    restart: unless-stopped

  # ─────────────── DB migration ───────────────
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "-c", "alembic.ini", "upgrade", "head"]
    restart: "no"
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini:ro

  # ─────────────── FastAPI app ───────────────
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - UVICORN_PORT=${UVICORN_PORT:-8000}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=${DATABASE_URL}
      - DB_URL=${DB_URL}
      # Auth/JWT
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      # Crypto for credentials
      - CREDENTIALS_MASTER_KEY=${CREDENTIALS_MASTER_KEY}
      # Optional exchange facade defaults
      - BINANCE_USDSF_API_KEY=${BINANCE_USDSF_API_KEY}
      - BINANCE_USDSF_API_SECRET=${BINANCE_USDSF_API_SECRET}
      - BINANCE_USDSF_BASE_URL=${BINANCE_USDSF_BASE_URL}
      - DRY_RUN_MODE=${DRY_RUN_MODE}
    ports: ["8000:8000"]
    volumes:
      - ./app:/app/app
      - ./app/services:/app/services
      - ./app/scripts:/app/scripts
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    extra_hosts: ["host.docker.internal:host-gateway"]
    restart: unless-stopped

  # ─────────────── Data pipeline ───────────────
  ingestor:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - PAIRS_1M=${PAIRS_1M:-BTCUSDT:1m}
      # Logging
      - INGESTOR_LOG_LEVEL=${INGESTOR_LOG_LEVEL:-INFO}
      - INGESTOR_LOG_1M=${INGESTOR_LOG_1M:-false}
      # Binance public market sources
      - BINANCE_MARKET=${BINANCE_MARKET:-um_futures}
      - BINANCE_WSS_BASE=${BINANCE_WSS_BASE}
      # Backfill knobs (new)
      - BACKFILL_ON_START=${BACKFILL_ON_START:-true}
      - BACKFILL_1M_LIMIT=${BACKFILL_1M_LIMIT:-500}
      - BACKFILL_MIN_2M=${BACKFILL_MIN_2M:-150}
      # Stream caps & retention
      - STREAM_MAXLEN_1M=${STREAM_MAXLEN_1M:-5000}
      - STREAM_MAXLEN_2M=${STREAM_MAXLEN_2M:-5000}
      - STREAM_RETENTION_MS_1M=${STREAM_RETENTION_MS_1M:-0}
      - STREAM_RETENTION_MS_2M=${STREAM_RETENTION_MS_2M:-0}
    working_dir: /app
    command: ["python", "-m", "services.ingestor.main"]
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./app/services/ingestor:/app/services/ingestor

  calc:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - PAIRS_1M=${PAIRS_1M:-BTCUSDT:1m,ETHUSDT:1m}
      - PRICE_TICK_DEFAULT=${PRICE_TICK_DEFAULT:-0.01}
      - STREAM_MAXLEN_IND=${STREAM_MAXLEN_IND:-5000}
      - STREAM_MAXLEN_SIGNAL=${STREAM_MAXLEN_SIGNAL:-2000}
      - STREAM_RETENTION_MS_IND=${STREAM_RETENTION_MS_IND:-0}
      - STREAM_RETENTION_MS_SIGNAL=${STREAM_RETENTION_MS_SIGNAL:-0}
    working_dir: /app
    command: ["python", "-m", "services.calc.main"]
    depends_on:
      redis:
        condition: service_healthy
      ingestor:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services/calc:/app/services/calc

  calc2:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - PAIRS_1M=${PAIRS_1M:-BTCUSDT:1m,ETHUSDT:1m}
      - PRICE_TICK_DEFAULT=${PRICE_TICK_DEFAULT:-0.01}
      - STREAM_MAXLEN_IND=${STREAM_MAXLEN_IND:-5000}
      - STREAM_MAXLEN_SIGNAL=${STREAM_MAXLEN_SIGNAL:-2000}
      - STREAM_RETENTION_MS_IND=${STREAM_RETENTION_MS_IND:-0}
      - STREAM_RETENTION_MS_SIGNAL=${STREAM_RETENTION_MS_SIGNAL:-0}
    working_dir: /app
    command: ["python", "-m", "services.calc2.main"]
    depends_on:
      redis:
        condition: service_healthy
      ingestor:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services/calc2:/app/services/calc2

  # ─────────────── Signal poller (calc → Celery) ───────────────
  poller:
    build:
      context: .
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - POLLER_SYMBOLS=${POLLER_SYMBOLS:-BTCUSDT}
      - POLLER_POLL_INTERVAL=${POLLER_POLL_INTERVAL:-1}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    working_dir: /app
    command: ["/bin/sh", "-lc", "/app/scripts/run_poller.sh ${POLLER_SYMBOLS}"]
    depends_on:
      redis:
        condition: service_healthy
      calc2:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services:/app/services
      - ./app/scripts:/app/scripts

  # ─────────────── Celery workers ───────────────
  worker-signals:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - TZ=UTC
      - BINANCE_USDSF_API_KEY=${BINANCE_USDSF_API_KEY}
      - BINANCE_USDSF_API_SECRET=${BINANCE_USDSF_API_SECRET}
      - BINANCE_USDSF_BASE_URL=${BINANCE_USDSF_BASE_URL}
      - CREDENTIALS_MASTER_KEY=${CREDENTIALS_MASTER_KEY}
      - DRY_RUN_MODE=${DRY_RUN_MODE:-true}
      - DATABASE_URL=${DATABASE_URL}
    working_dir: /app
    command: ["/bin/sh", "-c", "/app/scripts/run_worker_signals.sh"]
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services:/app/services
      - ./app/scripts:/app/scripts

  worker-reconcile:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - TZ=UTC
      - BINANCE_USDSF_API_KEY=${BINANCE_USDSF_API_KEY}
      - BINANCE_USDSF_API_SECRET=${BINANCE_USDSF_API_SECRET}
      - BINANCE_USDSF_BASE_URL=${BINANCE_USDSF_BASE_URL}
      - CREDENTIALS_MASTER_KEY=${CREDENTIALS_MASTER_KEY}
      - DRY_RUN_MODE=${DRY_RUN_MODE:-true}
      - DATABASE_URL=${DATABASE_URL}
    working_dir: /app
    command: ["/bin/sh", "-c", "/app/scripts/run_worker_reconcile.sh"]
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services:/app/services
      - ./app/scripts:/app/scripts

  # Optional: Celery Beat
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - TZ=UTC
      - RECONCILE_SYMBOLS=${RECONCILE_SYMBOLS}
      - RECONCILE_INTERVAL_SECONDS=${RECONCILE_INTERVAL_SECONDS:-45}
      - BINANCE_USDSF_API_KEY=${BINANCE_USDSF_API_KEY}
      - BINANCE_USDSF_API_SECRET=${BINANCE_USDSF_API_SECRET}
      - BINANCE_USDSF_BASE_URL=${BINANCE_USDSF_BASE_URL}
      - CREDENTIALS_MASTER_KEY=${CREDENTIALS_MASTER_KEY}
      - DRY_RUN_MODE=${DRY_RUN_MODE:-true}
      - DATABASE_URL=${DATABASE_URL}
    working_dir: /app
    command: ["/bin/sh", "-c", "/app/scripts/run_beat.sh"]
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services:/app/services
      - ./app/scripts:/app/scripts

  # ─────────────── Worker (new service) ───────────────
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # ---- Core wiring ----
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - POSTGRES_DSN=${DATABASE_URL}
      - SERVICE_NAME=worker
      - LOG_LEVEL=${WORKER_LOG_LEVEL:-INFO}
      # ---- Symbols & timeframe ----
      - WORKER_SYMBOLS=${WORKER_SYMBOLS:-BTCUSDT,ETHUSDT}
      - TIMEFRAME=${WORKER_TIMEFRAME:-2m}
      # ---- Stream behavior ----
      - STREAM_BLOCK_MS=${WORKER_STREAM_BLOCK_MS:-15000}
      - CATCHUP_THRESHOLD_MS=${WORKER_CATCHUP_THRESHOLD_MS:-15000}
      - ROUTER_REFRESH_SECONDS=${WORKER_ROUTER_REFRESH_SECONDS:-60}
      # ---- Balance cache ----
      - BALANCE_TTL_SECONDS=${WORKER_BALANCE_TTL_SECONDS:-30}
      # ---- Binance connector (modular by default) ----
      - BINANCE_CONNECTOR=${BINANCE_CONNECTOR:-modular}
      # Optional defaults (per-bot creds still from DB)
      - BINANCE_USDSF_API_KEY=${BINANCE_USDSF_API_KEY}
      - BINANCE_USDSF_API_SECRET=${BINANCE_USDSF_API_SECRET}
      # ---- Crypto for decrypting DB creds ----
      - CREDENTIALS_MASTER_KEY=${CREDENTIALS_MASTER_KEY}
    working_dir: /app
    command: ["python", "-u", "-m", "services.worker.main"]
    depends_on:
      redis:
        condition: service_started    # let worker self-wait for PONG
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      calc2:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./app/services:/app/services
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini:ro
    extra_hosts: ["host.docker.internal:host-gateway"]

volumes:
  redis-data:
  pg-data:
  pgadmin-data:
